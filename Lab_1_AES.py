#----- CS 465 ---- AES Danny North

from copy import deepcopy as narwhal
from time import sleep


def printState(inState):
	return " ".join(map(lambda x : x[2:].zfill(2), map(hex, inState)))

def listToHex(l):
	return charToHex("".join(map(lambda x : x[2:].zfill(2), map(hex, l))))

def hexToList(hx):
	hx_str = hex(hx)[2:].zfill(8)
	return map(charToHex, [hx_str[i:i+2] for i in range(0, len(hx_str), 2)])


def ffAdd(ff1, ff2):
	if type(ff1) is list:
		if type(ff2) is list:
			return hexToList(listToHex(ff1) ^ listToHex(ff2))
		else:
			return hexToList(listToHex(ff1) ^ ff2)
	elif type(ff2) is list:
		return hexToList(ff1 ^ listToHex(ff2))
	else:
		return ff1 ^ ff2

def xTime( ffA ):
	ffA = ffA << 1
	while ffA > 0xff:
		ffA = ffAdd(ffA , 0x11b)
	return ffA

def ffMultiply( ffA , ffB ):
	binary = map(int, list(bin(ffB)[2:][::-1]))
	xT = [ffA]
	for x in range(1, len(binary)):
		xT.append(xTime(xT[x - 1]))
	ans = 0
	for x in range(len(xT)):
		if binary[x]:
			ans = ffAdd( ans, xT[x])
	return ans

Sbox = [
	[ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ] ,
	[ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ] ,
	[ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ] ,
	[ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ] ,
	[ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ] ,
	[ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ] ,
	[ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ] ,
	[ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ] ,
	[ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ] ,
	[ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ] ,
	[ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ] ,
	[ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ] ,
	[ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ] ,
	[ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ] ,
	[ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ] ,
	[ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
	]

InvSbox = [
	[ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb ] ,
	[ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb ] ,
	[ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e ] ,
	[ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 ] ,
	[ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 ] ,
	[ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 ] ,
	[ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 ] ,
	[ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b ] ,
	[ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 ] ,
	[ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e ] ,
	[ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ] ,
	[ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 ] ,
	[ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f ] ,
	[ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef ] ,
	[ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 ] ,
	[ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]
	]

Rcon = [
		0x00000000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
		0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000, 0x6C000000,
		0xD8000000, 0xAB000000, 0x4D000000, 0x9A000000, 0x2F000000, 0x5E000000,
		0xBC000000, 0x63000000, 0xC6000000, 0x97000000, 0x35000000, 0x6A000000,
		0xD4000000, 0xB3000000, 0x7D000000, 0xFA000000, 0xEF000000, 0xC5000000,
		0x91000000, 0x39000000, 0x72000000, 0xE4000000, 0xD3000000, 0xBD000000,
		0x61000000, 0xC2000000, 0x9F000000, 0x25000000, 0x4A000000, 0x94000000,
		0x33000000, 0x66000000, 0xCC000000, 0x83000000, 0x1D000000, 0x3A000000,
		0x74000000, 0xE8000000, 0xCB000000, 0x8D000000
		]

Matrix = [
	[0x02, 0x03, 0x01, 0x01],
	[0x01, 0x02, 0x03, 0x01],
	[0x01, 0x01, 0x02, 0x03],
	[0x03, 0x01, 0x01, 0x02]
]

InvMatrix = [
	[0x0e, 0x0b, 0x0d, 0x09],
	[0x09, 0x0e, 0x0b, 0x0d],
	[0x0d, 0x09, 0x0e, 0x0b],
	[0x0b, 0x0d, 0x09, 0x0e]
]

def Cipher_128(inState, key, Nb=4, Nk=4, Nr=10, l=False):
	return Cipher( inState, key, Nb, Nk, Nr, l )

def Cipher_192(inState, key, Nb=4, Nk=6, Nr=12, l=False):
	return Cipher( inState, key, Nb, Nk, Nr, l )

def Cipher_256(inState, key, Nb=4, Nk=8, Nr=14, l=False):
	return Cipher( inState, key, Nb, Nk, Nr, l )

def Cipher(inState, key, Nb, Nk, Nr, l=False):
	state = narwhal(inState)
	w = KeyExpansion(key, Nb=Nb, Nk=Nk, Nr=Nr)
	if l:
		print "State: " + printState(state)
	state = AddRoundKey(state, w[0:Nb])
	if l:
		print "AddRoundKey: " + printState(state)
		sleep(1)
	for x in range(1, Nr):
		if l:
			print "ROUND {round}".format(round=str(x))
		state = SubBytes(state)
		if l:
			print "SubBytes: " + printState(state)
		state = ShiftRows(state)
		if l:
			print "ShiftRows: " + printState(state)
		state = MixColumns(state)
		if l:
			print "MixColumns: " + printState(state)
		state = AddRoundKey(state, w[x*Nb:(x+1)*Nb])
		if l:
			print "AddRoundKey: " + printState(state)
			sleep(1)
	state = SubBytes(state)
	if l:
		print "\nFINAL ROUND"
		print "SubBytes: " + printState(state)
	state = ShiftRows(state)
	if l:
		print "ShiftRows: " + printState(state)
	state = AddRoundKey(state, w[Nr*Nb:(Nr+1)*Nb])
	if l:
		print "AddRoundKey (FINAL CIPHERED TEXT):\n" + printState(state)
	return state

def InvCipher_128(inState, key, Nb=4, Nk=4, Nr=10, l=False):
	return InvCipher( inState, key, Nb, Nk, Nr, l )

def InvCipher_192(inState, key, Nb=4, Nk=6, Nr=12, l=False):
	return InvCipher( inState, key, Nb, Nk, Nr, l )

def InvCipher_256(inState, key, Nb=4, Nk=8, Nr=14, l=False):
	return InvCipher( inState, key, Nb, Nk, Nr, l )

def InvCipher(inState, key, Nb, Nk, Nr, l=False):
	state = narwhal( inState )
	w = KeyExpansion(key, Nb=Nb, Nk=Nk, Nr=Nr)
	if l:
		print "State: " + printState(state)
	state = AddRoundKey(state, w[Nr*Nb:(Nr+1)*Nb])
	if l:
		print "AddRoundKey: " + printState(state)
		sleep(1)
	rng = range(1, Nr)
	rng.reverse()
	for x in rng:
		if l:
			print "ROUND {round}".format(round=str(x))
		state = InvShiftRows(state)
		if l:
			print "InvShiftRows: " + printState(state)
		state = InvSubBytes(state)
		if l:
			print "InvSubBytes: " + printState(state)
		state = AddRoundKey(state, w[x*Nb:(x+1)*Nb])
		if l:
			print "AddRoundKey: " + printState(state)
		state = InvMixColumns(state)
		if l:
			print "InvMixColumns: " + printState(state)
			sleep(1)
	state = InvShiftRows(state)
	if l:
		print "\nFINAL ROUND"
		print "InvShiftRows: " + printState(state)
	state = InvSubBytes(state)
	if l:
		print "InvSubBytes: " + printState(state)
	state = AddRoundKey(state, w[0:Nb])
	if l:
		print "AddRoundKey (FINAL DECIPHERED TEXT): " + printState(state)
	return state

def InvSubBytes(inState):
	return subWord( inState, inv=True )

def InvShiftRows(inState):
	rows = toRows( inState )
	outState = []
	for x in range(4):
		word = narwhal( rows[x] )
		for y in range(x):
			word = rotWord(word, inv=True)
		outState.append(word)
	return toState(outState)

def InvMixColumns( inState ):
	return MixColumns(inState, inv=True)

def KeyExpansion(key, Nb, Nk, Nr):
	temp = []
	i = 0
	w = ['' for x in range(Nb*(Nr+1))]
	while (i < Nk):
		w[i] = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]]
		i += 1
	i = Nk
	while (i < Nb*(Nr+1)):
		temp = w[i-1]
		if (i % Nk == 0):
			temp = ffAdd(subWord(rotWord(temp)), Rcon[i/Nk])
		elif Nk > 6 and i % Nk == 4:
			temp = subWord(temp)
		w[i] = ffAdd(w[i-Nk], temp)
		i += 1
	return w

def AddRoundKey(inState, rndKey):
	cols = toCols(inState)
	outState = []
	for x in range(len(inState)):
		outState.append(ffAdd(inState[x], flatten(rndKey)[x]))
	return outState

def charToHex(char):
	return int(char, 16)

def flatten(lol):
	return [item for sublist in lol for item in sublist]

def subWord(inWord, inv=False):
	outWord = []
	for hx in inWord:
		if hx < 0x10:
			i = 0
			j = hx
		else:
			i, j = map(charToHex, list(hex(hx)[2:]))
		box = Sbox
		if inv:
			box = InvSbox
		outWord.append(box[i][j])
	return outWord

def toState(inRows):
	outState = []
	for x in range(4):
		for y in range(4):
			outState.append(inRows[y][x])
	return outState

def rotWord(inWord, inv=False):
	outWord = narwhal( inWord )
	if inv:
		f = outWord.pop()
		outWord = [f] + outWord
	else:
		f = outWord[0]
		outWord.remove(f)
		outWord.append(f)
	return outWord

def SubBytes( state ):
	return subWord( state )

def ShiftRows(inState):
	rows = toRows(inState)
	outState = []
	for x in range(4):
		word = narwhal( rows[x] )
		for y in range(x):
			word = rotWord(word)
		outState.append(word)
	return toState(outState)

def MixColumns(inState, inv=False):
	cols = toCols(inState)
	outState = []
	m = Matrix
	if inv:
		m = InvMatrix
	for col in cols:
		new_col = []
		s0, s1, s2, s3 = col
		sp0 = ffMultiply(m[0][0], s0) ^ ffMultiply(m[0][1], s1) ^ ffMultiply(m[0][2], s2) ^ ffMultiply(m[0][3], s3)
		sp1 = ffMultiply(m[1][0], s0) ^ ffMultiply(m[1][1], s1) ^ ffMultiply(m[1][2], s2) ^ ffMultiply(m[1][3], s3)
		sp2 = ffMultiply(m[2][0], s0) ^ ffMultiply(m[2][1], s1) ^ ffMultiply(m[2][2], s2) ^ ffMultiply(m[2][3], s3)
		sp3 = ffMultiply(m[3][0], s0) ^ ffMultiply(m[3][1], s1) ^ ffMultiply(m[3][2], s2) ^ ffMultiply(m[3][3], s3)
		outState += sp0, sp1, sp2, sp3
	return outState

def toCols(inState):
	return map(list, zip(*[iter(inState)]*4))

def toRows(inState):
	rows = []
	for x in range(4):
		row = []
		indexes = map(lambda b : b + x, filter(lambda a : a % 4 == 0, range(16)))
		for i in indexes:
			row.append(inState[i])
		rows.append(row)
	return rows


plaintext = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
key128 = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
key192 = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]
key256 = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f]
